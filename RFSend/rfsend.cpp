#include <iostream>
#include <iomanip>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>

using namespace std;

unsigned char txon[15][38]=
{
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x20,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x0e,	0xd0,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x20,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x0b,	0x42,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x20,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x65,	0xc7,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x2b,	0x5d,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x2e,	0xcf,	0x90},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x40,	0x4a,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x91,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x70,	0x53,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x31,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x1e,	0xd6,	0x30},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xf1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x1b,	0x44,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x49,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x46,	0xda,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xa9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x54,	0xd1,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x19,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x18,	0x46,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xd9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x1d,	0xd4,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x79,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x73,	0x51,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x85,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x20,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x40,	0x90,	0x4,	0x1,	0x5a,	0xc5,	0x30}
};

unsigned char txoff[15][38]=
{
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x10,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x57,	0xc1,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x10,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x52,	0x53,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x44,	0x16,	0x4,	0x1,	0x10,	0x40,	0x11,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x19,	0xc6,	0x71,	0x9c,	0x67,	0x3c,	0xd6,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x4f,	0x5d,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x4a,	0xcf,	0x90},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x24,	0x4a,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x91,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x14,	0x53,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x31,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x7a,	0xd6,	0x30},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xf1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x7f,	0x44,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x49,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x22,	0xda,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xa9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x30,	0xd1,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x19,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x7c,	0x46,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xd9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x79,	0xd4,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x79,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x17,	0x51,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x85,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x10,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x5,	0x0,	0x48,	0x90,	0x4,	0x1,	0x3e,	0xc5,	0x30}
};

unsigned char txdown[15][38]=
{
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x74,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x30,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x48,	0x11,	0x9c,	0x67,	0x6f,	0x53,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x74,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x30,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x48,	0x11,	0x9c,	0x67,	0x6a,	0xc1,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x74,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x30,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x48,	0x11,	0x9c,	0x67,	0x4,	0x44,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x69,	0xd0,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x6c,	0x42,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x2,	0xc7,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x91,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x32,	0xde,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x31,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x5c,	0x5b,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0xf1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x59,	0xc9,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x49,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x4,	0x57,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0xa9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x16,	0x5c,	0x30},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x19,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x5a,	0xcb,	0x90},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0xd9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x5f,	0x59,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x79,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x31,	0xdc,	0x90},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x72,	0x8c,	0x85,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x30,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x40,	0x10,	0x4,	0xd1,	0x18,	0x48,	0xd0}
};

unsigned char txup[15][38]=
{
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x50,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x58,	0x11,	0x9c,	0x67,	0x68,	0xdb,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x50,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x58,	0x11,	0x9c,	0x67,	0x6d,	0x49,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x76,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x46,	0x16,	0x4,	0x1,	0x50,	0x40,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x0,	0x58,	0x11,	0x9c,	0x67,	0x3,	0xcc,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x6e,	0x58,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xc1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x6b,	0xca,	0x50},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x61,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x5,	0x4f,	0x70},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x91,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x35,	0x56,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x31,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x5b,	0xd3,	0xf0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xf1,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x5e,	0x41,	0xd0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x49,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x3,	0xdf,	0x30},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xa9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x11,	0xd4,	0x10},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x19,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x5d,	0x43,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0xd9,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x58,	0xd1,	0x90},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x79,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x36,	0x54,	0xb0},
{0x55,	0x55,	0x55,	0x55,	0xff,	0x2f,	0xcf,	0x70,	0x8c,	0x85,	0x0,	0x4f,	0xb6,	0x6c,	0xa3,	0x42,	0x4e,	0x16,	0x4,	0x1,	0x50,	0x50,	0x10,	0x4,	0xfb,	0x66,	0xca,	0x30,	0x4,	0x85,	0x20,	0x50,	0x10,	0x4,	0xd1,	0x1f,	0xc0,	0xf0}
};

class SPI {
public:
	enum Registers {
		IOCFG2=0,
		IOCFG1,
		IOCFG0,
		FIFOTHR,
		SYNC1,
		SYNC0,
		PKTLEN,
		PKTCTRL1,
		PKTCTRL0,
		ADDR,
		CHANNR,
		FSCTRL1,
		FSCTRL0,
		FREQ2,
		FREQ1,
		FREQ0,
		MDMCFG4,
		MDMCFG3,
		MDMCFG2,
		MDMCFG1,
		MDMCFG0,
		DEVIATN,
		MCSM2,
		MCSM1,
		MCSM0,
		FOCCFG,
		BSCFG,
		AGCCTRL2,
		AGCCTRL1,
		AGCCTRL0,
		WOREVT1,
		WOREVT0,
		WORCTRL,
		FREND1,
		FREND0,
		FSCAL3,
		FSCAL2,
		FSCAL1,
		FSCAL0,
		RCCTRL1,
		RCCTRL0,
		FSTEST,
		PTEST,
		AGCTEST,
		TEST2,
		TEST1,
		TEST0,
		REG_RESERVED,
		PARTNUM,
		VERSION,
		FREQEST,
		LQI,
		RSSI,
		MARCSTATE,
		WORTIME1,
		WORTIME0,
		PKTSTATUS,
		VCO_VC_DAC,
		TXBYTES,
		RXBYTES,
		RCCTRL1_STATUS,
		RCCTRL0_STATUS
	};
	enum Commands {
		SRES=0x30,
		SFSTXON,
		SXOFF,
		SCAL,
		SRX,
		STX,
		SIDLE,
		COM_RESERVED,
		SWOR,
		SPWD,
		SFRX,
		SFTX,
		SWORRST,
		SNOP
	};
	SPI();
	unsigned char ReadReg(Registers reg);
	void          WriteReg(Registers reg, unsigned char val);
	void          SendCommand(Commands cmd);
	void          ReadFIFO(unsigned int size);
	void          WriteFIFO(unsigned char* buf, int size);
private:
	int spiDev;
};

SPI::SPI()
{
	if ((spiDev = open("/dev/spidev0.0", O_RDWR)) < 0)
	{
		cout << "Erro abrindo arquivo!\n";
		exit(-1);
	}
		
	cout << "SPI aberta com sucesso!\n";
}

void SPI::SendCommand(Commands cmd)
{
	unsigned char txBuffer[1]={cmd};
	unsigned char rxBuffer[1]={0};

	struct spi_ioc_transfer xfer;
	memset(&xfer, 0, sizeof(xfer));
	xfer.tx_buf = (unsigned long)txBuffer;
	xfer.rx_buf = (unsigned long)rxBuffer;
	xfer.len = 1;

	int res = ioctl(spiDev, SPI_IOC_MESSAGE(1), &xfer);
	if (res <=0)
	{
		cout << "Erro escrevendo registrador!\n";
		exit(-1);
	}

	return;
}

void SPI::WriteReg(Registers reg, unsigned char val)
{
	unsigned char txBuffer[2]={reg,val};
	unsigned char rxBuffer[2]={0,0};

	struct spi_ioc_transfer xfer;
	memset(&xfer, 0, sizeof(xfer));
	xfer.tx_buf = (unsigned long)txBuffer;
	xfer.rx_buf = (unsigned long)rxBuffer;
	xfer.len = 2;

	int res = ioctl(spiDev, SPI_IOC_MESSAGE(1), &xfer);
	if (res <=0)
	{
		cout << "Erro escrevendo registrador!\n";
		exit(-1);
	}

	return;
}

unsigned char SPI::ReadReg(Registers reg)
{
	unsigned char txBuffer[2]={0,0};
	unsigned char rxBuffer[2]={0,0};

	txBuffer[0] = 0x80 | reg;
	if (reg >= 0x30)
		txBuffer[0] |= 0x40;

	struct spi_ioc_transfer xfer;
	memset(&xfer, 0, sizeof(xfer));
	xfer.tx_buf = (unsigned long)txBuffer;
	xfer.rx_buf = (unsigned long)rxBuffer;
	xfer.len = 2;

	int res = ioctl(spiDev, SPI_IOC_MESSAGE(1), &xfer);
	if (res <=0)
	{
		cout << "Erro lendo registrador!\n";
		exit(-1);
	}
	
	return rxBuffer[1];
}

void SPI::WriteFIFO(unsigned char* buf, int size)
{
	unsigned char *txBuffer=new unsigned char[size+1];
	unsigned char *rxBuffer=new unsigned char[size+1];

	txBuffer[0]=0x7f;

	for (int i=0;i<size;i++)
		txBuffer[i+1]=buf[i];

	struct spi_ioc_transfer xfer;
	memset(&xfer, 0, sizeof(xfer));
	xfer.tx_buf = (unsigned long)txBuffer;
	xfer.rx_buf = (unsigned long)rxBuffer;
	xfer.len = size+1;

	int res = ioctl(spiDev, SPI_IOC_MESSAGE(1), &xfer);
	if (res <=0)
	{
		cout << "Erro escrevendo registrador!\n";
		exit(-1);
	}

	delete[] txBuffer;
	delete[] rxBuffer;
}

void SPI::ReadFIFO(unsigned int size)
{
	unsigned char *txBuffer=new unsigned char[size+1];
	unsigned char *rxBuffer=new unsigned char[size+1];

	memset(txBuffer,0,size+1);
	txBuffer[0] = 0xFF;
	
	struct spi_ioc_transfer xfer;
	memset(&xfer, 0, sizeof(xfer));
	xfer.tx_buf = (unsigned long)txBuffer;
	xfer.rx_buf = (unsigned long)rxBuffer;
	xfer.len = size+1;

	int res = ioctl(spiDev, SPI_IOC_MESSAGE(1), &xfer);
	if (res <=0)
	{
		cout << "Erro lendo registrador!\n";
		exit(-1);
	}

	for (int i=1;i<size+1;i++)
	{
		cout << std::setw(2) << (int)rxBuffer[i] << " ";
	}

	delete[] txBuffer;
	delete[] rxBuffer;
}

int main()
{
	const int pktlen = 33;

	cout << "Iniciando...\n";
	cout << std::hex << std::setfill('0'); 
	
	SPI spi;

	spi.SendCommand(SPI::SRES);
	usleep(1000);

	cout <<  "F0:" << std::setw(2) << (unsigned int)spi.ReadReg(SPI::PARTNUM) <<
		" F1:" << std::setw(2) << (unsigned int)spi.ReadReg(SPI::VERSION) << "\n";

	spi.WriteReg(SPI::IOCFG0,0x06);  //GDO0 Output Pin Configuration
	spi.WriteReg(SPI::FIFOTHR,0x47); //RX FIFO and TX FIFO Thresholds

	spi.WriteReg(SPI::SYNC1,0x55);
	spi.WriteReg(SPI::SYNC0,0xFF);
	spi.WriteReg(SPI::PKTLEN,pktlen);
	spi.WriteReg(SPI::PKTCTRL0,0x00);

	spi.WriteReg(SPI::FSCTRL1,0x06); //Frequency Synthesizer Control
	spi.WriteReg(SPI::FREQ2,0x10);   //Frequency Control Word, High Byte
	spi.WriteReg(SPI::FREQ1,0xAD);   //Frequency Control Word, Middle Byte
	spi.WriteReg(SPI::FREQ0,0x52);   //Frequency Control Word, Low Byte
	spi.WriteReg(SPI::MDMCFG4,0x0B); //Modem Configuration
	spi.WriteReg(SPI::MDMCFG3,0x3B); //Modem Configuration

	spi.WriteReg(SPI::MDMCFG2,0x12);

	spi.WriteReg(SPI::DEVIATN,0x41); //Modem Deviation Setting
	spi.WriteReg(SPI::MCSM0,0x18);   //Main Radio Control State Machine Configuration
	spi.WriteReg(SPI::FOCCFG,0x16);  //Frequency Offset Compensation Configuration
	spi.WriteReg(SPI::WORCTRL,0xFB); //Wake On Radio Control
	spi.WriteReg(SPI::FSCAL3,0xA9);  //Frequency Synthesizer Calibration
	spi.WriteReg(SPI::FSCAL2,0x2A);  //Frequency Synthesizer Calibration
	spi.WriteReg(SPI::FSCAL1,0x00);  //Frequency Synthesizer Calibration
	spi.WriteReg(SPI::FSCAL0,0x0D);  //Frequency Synthesizer Calibration
	spi.WriteReg(SPI::TEST2,0x81);   //Various Test Settings
	spi.WriteReg(SPI::TEST1,0x35);   //Various Test Settings
	spi.WriteReg(SPI::TEST0,0x09);   //Various Test Settings

	spi.SendCommand(SPI::SCAL);
	usleep(1000);

	for (int i=0;i<15;i++)
	{
		spi.SendCommand(SPI::SFTX);
		spi.WriteReg(SPI::PKTLEN,39);
		spi.WriteReg(SPI::MDMCFG2,0x10); //No sync or preamble on TX
		spi.WriteFIFO(txup[i],38);	
		spi.SendCommand(SPI::STX);
		cerr << ".";
		
		usleep(50000);
	}
		
/*
	spi.SendCommand(SPI::SRX);

	while (1)
	{
		int rxbytes = spi.ReadReg(SPI::RXBYTES);
		if (rxbytes == pktlen + 2) {
			spi.ReadFIFO(rxbytes);
			cout << "\n";
			spi.SendCommand(SPI::SRX);
		}
	}
*/

	return 0;
}
